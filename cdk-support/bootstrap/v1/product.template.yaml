# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Bootstrap for CDK support in SCT
  {"framework": "servicecatalog-products", "role": "product", "product-set": "cdk-support", "product": "bootstrap", "version": "v1"}

Parameters:
  CDKVersion:
    Type: "String"
    Default: "1.94.1"

  CDKDeployComputeType:
    Type: "String"
    Default: "BUILD_GENERAL1_SMALL"

  CDKDeployImage:
    Type: "String"
    Default: "aws/codebuild/standard:4.0"

  CDKToolkitStackName:
    Type: "String"
    Default: "CDKToolkit"

  CDKBootstrapExtraArgs:
    Type: "String"
    Default: ""

  IAMRolePaths:
    Type: "String"
    Default: "/servicecatalog-factory-cdk-support/"

  CDKInitialiserRoleName:
    Type: "String"
    Default: "CDKInitialiserRoleName"

  CDKStartInstallRoleName:
    Type: "String"
    Default: "CDKStartInstallRoleName"

  CDKDeployRoleName:
    Type: "String"
    Default: "CDKDeployRoleName"

  StartCDKDeployLambdaExecutionRoleName:
    Type: "String"
    Default: "StartCDKDeployLambdaExecutionRoleName"

  PuppetAccountId:
    Type: "String"


Resources:
  InitialiserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CDKInitialiserRoleName
      Path: !Ref IAMRolePaths
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  InitialiserProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-factory-cdk-bootstrap-initialiser
      Description: "Initialiser for the cdk support"
      ServiceRole: !GetAtt InitialiserRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: linuxContainer
        ComputeType: !Ref CDKDeployComputeType
        Image: !Ref CDKDeployImage
        EnvironmentVariables:
          - Name: CDK_VERSION
            Type: PLAINTEXT
            Value: !Ref CDKVersion
          - Name: CDK_DEPLOY_COMPUTE_TYPE
            Type: PLAINTEXT
            Value: !Ref CDKDeployComputeType
          - Name: CDK_DEPLOY_IMAGE
            Type: PLAINTEXT
            Value: !Ref CDKDeployImage
          - Name: CDK_TOOLKIT_STACK_NAME
            Type: PLAINTEXT
            Value: !Ref CDKToolkitStackName
          - Name: CDK_BOOTSTRAP_EXTRA_ARGS
            Type: PLAINTEXT
            Value: !Ref CDKBootstrapExtraArgs

          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: REGION
            Type: PLAINTEXT
            Value: !Ref AWS::Region

      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - npm install -g aws-cdk@$VERSION
            build:
              commands:
                - cdk bootstrap --toolkit-stack-name $CDK_TOOLKIT_STACK_NAME $CDK_BOOTSTRAP_EXTRA_ARGS aws://$ACCOUNT_ID/$REGION

      TimeoutInMinutes: 60
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  StartInstallRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CDKStartInstallRoleName
      Path: !Ref IAMRolePaths
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSCodeBuildDeveloperAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  StartInstallLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt StartInstallRole.Arn
      Handler: "index.handler"
      Description: Lambda for starting cdk bootstrap CodeBuild Job
      Runtime: python3.7
      Timeout: 900
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import time
          from urllib.request import Request, urlopen

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              request_type = event['RequestType']
              codebuild_projectname = event.get('ResourceProperties').get('ProjectName')

              try:
                  logger.info(request_type)
                  if request_type in ['Create', 'Update']:
                      codebuild_client = boto3.client('codebuild')
                      logger.info("Starting CodeBuild Job: {}".format(codebuild_projectname))
                      codebuild_response = codebuild_client.start_build(
                          projectName = codebuild_projectname
                      )
                      build_id = codebuild_response.get('build').get('id')
                      build_status = 'IN_PROGRESS'
                      while build_status == 'IN_PROGRESS':
                          time.sleep(5)
                          build = codebuild_client.batch_get_builds(ids=[build_id]).get('builds')[0]
                          build_status = build.get('buildStatus')
                      if build_status != 'SUCCEEDED':
                          raise Exception(f"Build did not SUCCEED. Status: {build_status}")
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Updated"})

                  elif request_type == 'Delete':
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Deleted"})

                  else:
                      send_response(event, context, "FAILED",
                                    {"Message": "Unexpected"})

              except Exception as ex:
                  logger.error(ex)
                  send_response(event, context,"FAILED",
                                    {"Message": "Exception"})

          def send_response(e, c, rs, rd):
              r = json.dumps({
                  "Status": rs,
                  "Reason": "CloudWatch Log Stream: " + c.log_stream_name,
                  "PhysicalResourceId": c.log_stream_name,
                  "StackId": e['StackId'],
                  "RequestId": e['RequestId'],
                  "LogicalResourceId": e['LogicalResourceId'],
                  "Data": rd
              })
              d = str.encode(r)
              h = {
                  'content-type': '',
                  'content-length': str(len(d))
              }
              req = Request(e['ResponseURL'], data=d, method='PUT', headers=h)
              r = urlopen(req)
              logger.info("Status message: {} {}".format(r.msg, r.getcode()))

  StartInstall:
    Type: Custom::CustomResource
    DependsOn: InitialiserProject
    Properties:
      ServiceToken: !GetAtt StartInstallLambda.Arn
      ProjectName: !Ref InitialiserProject
      UpdateNonce: !Join
        - ","
        - - !Ref CDKDeployComputeType
          - !Ref CDKDeployImage
          - !Ref CDKToolkitStackName
          - !Ref CDKBootstrapExtraArgs

  StartCDKDeployLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Path: !Ref IAMRolePaths
      RoleName: !Ref StartCDKDeployLambdaExecutionRoleName
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - codebuild:*
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: allowtrigger
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:Get*
                  - s3:List*
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: allows3

  CDKDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Path: !Ref IAMRolePaths
      RoleName: !Ref CDKDeployRoleName

  StartCDKDeploy:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          from urllib.request import Request, urlopen
          import boto3
          import logging


          def handler(event, context):
              request_type = event["RequestType"]
              try:
                  if request_type in ["Create", "Update"]:
                      properties = event.get("ResourceProperties")
                      project_name = properties.get("Project")
                      codebuild = boto3.client("codebuild")
                      args = [
                          "CDK_DEPLOY_EXTRA_ARGS",
                          "CDK_TOOLKIT_STACK_NAME",
                          "PUPPET_ACCOUNT_ID",
                          "CDK_DEPLOY_PARAMETER_ARGS",
                          "CDK_DEPLOY_REQUIRE_APPROVAL",
                          "NAME",
                          "VERSION",
                      ]

                      evo = [
                          {
                              "name": "ON_COMPLETE_URL",
                              "value": properties.get("Handle"),
                              "type": "PLAINTEXT",
                          },
                      ] + [
                          {"name": p, "type": "PLAINTEXT", "value": properties.get(p)}
                          for p in args
                      ]

                      print(evo)

                      bootstrapper_build = codebuild.start_build(
                          projectName=project_name,
                          environmentVariablesOverride=evo,
                      ).get("build")
                      build_status = bootstrapper_build.get("buildStatus")
                      build_id = bootstrapper_build.get("id")
                      send_response(
                          event,
                          context,
                          "SUCCESS",
                          {
                              "Message": f"{request_type} successful.  Build status: {build_status}",
                              "BuildId": build_id,
                          },
                      )
                  else:
                      send_response(
                          event, context, "SUCCESS", {"Message": f"{request_type} successful",},
                      )

              except Exception as ex:
                  print(logging.traceback.format_exc())
                  send_response(event, context, "FAILED", {"Message": f"Exception {ex}"})


          def send_response(e, c, status, data):
              print(e, c, status, data)
              r = json.dumps(
                  {
                      "Status": status,
                      "Reason": "CloudWatch Log Stream: " + c.log_stream_name,
                      "PhysicalResourceId": c.log_stream_name,
                      "StackId": e["StackId"],
                      "RequestId": e["RequestId"],
                      "LogicalResourceId": e["LogicalResourceId"],
                      "Data": data,
                  }
              )
              d = str.encode(r)
              h = {"content-type": "", "content-length": str(len(d))}
              req = Request(e["ResponseURL"], data=d, method="PUT", headers=h)
              r = urlopen(req)
      FunctionName: servicecatalog-tools--StartCDKDeploy
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt StartCDKDeployLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 30

  GetOutputsForGivenCodebuildId:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          from urllib.request import Request, urlopen
          import boto3
          import logging
          from botocore.exceptions import ClientError
          import time


          def handler(event, context):
              request_type = event["RequestType"]
              try:
                  if request_type in ["Create", "Update"]:
                      properties = event.get("ResourceProperties")
                      bucket_name = properties.get("BucketName")
                      code_build_build_id = properties.get("CodeBuildBuildId")
                      object_key_prefix = properties.get("ObjectKeyPrefix")
                      object_key = f"{object_key_prefix}/scf_outputs-{code_build_build_id}.json"

                      client = boto3.client('s3')
                      print(bucket_name)
                      print(object_key)

                      response = None

                      while response is None:
                          try:
                              response = client.get_object(
                                  Bucket=bucket_name,
                                  Key=object_key,
                              )
                          except ClientError as ex:
                              if ex.response['Error']['Code'] == 'NoSuchKey':
                                  print("Not yet found outputs file")
                                  time.sleep(3)
                              else:
                                  raise

                      print("Found the outputs file")

                      artifact = json.loads(
                          response.get('Body').read()
                      )

                      data = {
                          "Message": f"{request_type} successful",
                          **artifact
                      }

                      send_response(
                          event, context, "SUCCESS", data,
                      )


                  else:
                      send_response(
                          event, context, "SUCCESS", {"Message": f"{request_type} successful", },
                      )

              except Exception as ex:
                  print(logging.traceback.format_exc())
                  send_response(event, context, "FAILED", {"Message": f"Exception {ex}"})


          def send_response(e, c, rs, rd):
              print("send_response", e, c, rs, rd)
              r = json.dumps(
                  {
                      "Status": rs,
                      "Reason": "CloudWatch Log Stream: " + c.log_stream_name,
                      "PhysicalResourceId": c.log_stream_name,
                      "StackId": e["StackId"],
                      "RequestId": e["RequestId"],
                      "LogicalResourceId": e["LogicalResourceId"],
                      "Data": rd,
                  }
              )
              d = str.encode(r)
              h = {"content-type": "", "content-length": str(len(d))}
              req = Request(e["ResponseURL"], data=d, method="PUT", headers=h)
              r = urlopen(req)
      FunctionName: servicecatalog-tools--GetOutputsForGivenCodebuildId
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt 'StartCDKDeployLambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: 90

  CDKDeploy:
    Properties:
      Artifacts:
        Location: !Sub 'sc-factory-artifacts-${PuppetAccountId}-${AWS::Region}'
        Name: cdk-1.0.0-artifacts
        NamespaceType: BUILD_ID
        Type: S3
      Description: !Sub 'Run CDK deploy for given source code'
      Environment:
        ComputeType: !Ref 'CDKDeployComputeType'
        EnvironmentVariables:
          - Name: CDK_DEPLOY_REQUIRE_APPROVAL
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: CDK_DEPLOY_EXTRA_ARGS
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: CDK_TOOLKIT_STACK_NAME
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: UId
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: PUPPET_ACCOUNT_ID
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: REGION
            Type: PLAINTEXT
            Value: !Ref 'AWS::Region'
          - Name: CDK_DEPLOY_PARAMETER_ARGS
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: ON_COMPLETE_URL
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: NAME
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: VERSION
            Type: PLAINTEXT
            Value: CHANGE_ME
        Image: !Ref 'CDKDeployImage'
        Type: LINUX_CONTAINER
      Name: ServiceCatalogFactory-RUN-CDK-DEPLOY
      ServiceRole: !GetAtt 'CDKDeployRole.Arn'
      Source:
        BuildSpec: !Sub |
          version: 0.2
          artifacts:
            files:
            - '*'
            - '**/*'
            name: CDKDeploy
          phases:
            install:
              commands:
              - aws s3 cp s3://sc-factory-artifacts-$PUPPET_ACCOUNT_ID-$REGION/cdk/1.0.0/$NAME/$VERSION/$NAME-$VERSION.zip $NAME-$VERSION.zip
              - unzip $NAME-$VERSION.zip
            build:
              commands:
              - echo "building"
              - |
                npm run cdk deploy -- \
                     --toolkit-stack-name $CDK_TOOLKIT_STACK_NAME \
                     --require-approval $CDK_DEPLOY_REQUIRE_APPROVAL \
                     --outputs-file scf_outputs.json \
                     $CDK_DEPLOY_EXTRA_ARGS $CDK_DEPLOY_PARAMETER_ARGS '*'
              on-failure: CONTINUE
            post_build:
              commands:
              - aws s3 cp scf_outputs.json s3://sc-factory-artifacts-$PUPPET_ACCOUNT_ID-$REGION/cdk/1.0.0/$NAME/$VERSION/scf_outputs-$CODEBUILD_BUILD_ID.json
              - |
                if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ]; then
                    curl -X PUT -H 'Content-Type:' --data-binary '{"Status" : "SUCCESS", "Reason" : "Deploy completed", "UniqueId" : "$CODEBUILD_BUILD_ID", "Data" : "'"$CODEBUILD_BUILD_ID"'"}' "$ON_COMPLETE_URL"
                else
                    curl -X PUT -H 'Content-Type:' --data-binary '{"Status" : "FAILURE", "Reason" : "Deploy failed", "UniqueId" : "'"$CODEBUILD_BUILD_ID"'", "Data" : "'"$CODEBUILD_BUILD_ID"'"}' "$ON_COMPLETE_URL"
                fi
        Type: NO_SOURCE
      TimeoutInMinutes: 60
    Type: AWS::CodeBuild::Project

Outputs:
  StartCDKDeployFunctionArn:
    Value: !GetAtt StartCDKDeploy.Arn

  GetOutputsForGivenCodebuildIdFunctionArn:
    Value: !GetAtt GetOutputsForGivenCodebuildId.Arn

  CDKDeployProject:
    Value: !Ref CDKDeploy