AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  CuratedReportingPutOrModifyReportExecutionRoleName:
    Type: String
    Default: "CuratedReportingPutOrModifyReportExecutionRole"

  CuratedReportingPutOrModifyReportExecutionRolePath:
    Type: String
    Default: "/platform/CuratedReporting/"

  AWSOrgsCURReadWriteAccessRoleArn:
    Type: String

Resources:
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import logging
          import boto3
          import os
          import json

          boto_level = os.environ.get("BOTO_LOG_LEVEL", logging.CRITICAL)
          logging.getLogger("boto").setLevel(boto_level)
          logging.getLogger("boto3").setLevel(boto_level)
          logging.getLogger("botocore").setLevel(boto_level)
          logging.getLogger("urllib3").setLevel(boto_level)

          log_level = os.environ.get("LOG_LEVEL", logging.WARNING)
          logger = logging.getLogger(__name__)
          logging.basicConfig(
              format="%(levelname)s %(threadName)s %(message)s", level=logging.INFO
          )
          logger.setLevel(log_level)


          def handle(event, context):
              logger.info("starting")
              logger.debug(json.dumps(event, default=str))

              report_name = event.get("ReportName")
              report_definitions = {
                      'ReportName': event.get("ReportDefinitionReportName"),
                      'TimeUnit': event.get("ReportDefinitionTimeUnit"),
                      'Format': event.get("ReportDefinitionFormat"),
                      'Compression': event.get("ReportDefinitionCompression"),
                      'AdditionalSchemaElements': event.get("ReportDefinitionAdditionalSchemaElements").split("|"),
                      'S3Bucket': event.get("ReportDefinitionS3Bucket"),
                      'S3Prefix': event.get("ReportDefinitionS3Prefix"),
                      'S3Region': event.get("ReportDefinitionS3Region"),
                      'AdditionalArtifacts': event.get("ReportDefinitionAdditionalArtifacts").split("|"),
                      'RefreshClosedReports': str(event.get("ReportDefinitionRefreshClosedReports")).upper() == "TRUE",
                      'ReportVersioning': event.get("ReportDefinitionReportVersioning"),
              }
              parameters = dict(ReportDefinition=report_definitions)

              aws_orgs_cur_read_write_access_role_arn = os.environ.get("AWS_ORGS_CUR_READ_WRITE_ACCESS_ROLE_ARN")
              sts = boto3.client('sts')
              assumed_role_object = sts.assume_role(
                  RoleArn=aws_orgs_cur_read_write_access_role_arn,
                  RoleSessionName='aws_orgs_cur_read_write_access_role_arn',
              )
              credentials = assumed_role_object['Credentials']
              kwargs = {
                  "aws_access_key_id": credentials['AccessKeyId'],
                  "aws_secret_access_key": credentials['SecretAccessKey'],
                  "aws_session_token": credentials['SessionToken'],
              }
              cur = boto3.client('cur', region_name="us-east-1", **kwargs)
              paginator = cur.get_paginator('describe_report_definitions')
              for page in paginator.paginate():
                  for report_definition in page.get("ReportDefinitions", []):
                      if report_definition.get("ReportName") == report_name:
                          parameters['ReportName'] = report_name
                          cur.modify_report_definition(**parameters)
                          logger.info("updated")
                          return

              cur.put_report_definition(**parameters)
              logger.info("created")

      Handler: handler.handle
      MemorySize: 128
      Runtime: python3.8
      Role: !GetAtt ExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          AWS_ORGS_CUR_READ_WRITE_ACCESS_ROLE_ARN: !Ref AWSOrgsCURReadWriteAccessRoleArn
          BOTO_LOG_LEVEL: CRITICAL
          LOG_LEVEL: INFO

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CuratedReportingPutOrModifyReportExecutionRoleName
      Path: !Ref CuratedReportingPutOrModifyReportExecutionRolePath
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CurPerms
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref AWSOrgsCURReadWriteAccessRoleArn
        - PolicyName: Logging
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
