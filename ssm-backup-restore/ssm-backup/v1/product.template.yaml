# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: |
  Custom serverless solution that backs up SSM parameters to an S3 Bucket, bucket encrypted via KMS, user can specify AWS managed key or CMK

Parameters:

  pS3BucketName:
    Type: String
    Description: The name for the S3 storage bucket, must be globally unique. i.e. include account number in name
  
  pKmsKeyId:
    Type: String
    Description: The KMS or CMK id for S3 bucket encryption
  
  pDrRegion:
    Type: String
    Description: The region for Disaster Recovery

  pBackupSchedule:
    Type: String
    Description: The schedule to backup parameters, based on RPO.
    ConstraintDescription: rate(30 minutes), rate(1 hour), rate(1 day)

  pSNSUpdateEmail:
    Type: String # Change this to a regex for emails <-Constraint Description
    Description: The email address to ping when a backup or restore operation occurs
    
  pIamRolePath:
    Type: String
    Description: The desired IAM Role path. 

Resources:

  # S3 Bucket
  rBackupS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref pS3BucketName
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt rBucketReplicationRole.Arn
        Rules:
          - Id: DrReplicationRule
            Status: Enabled
            SourceSelectionCriteria:
              SseKmsEncryptedObjects:
                Status: 'Enabled'
            Destination:
              Bucket: !GetAtt rCreateDrBucket.bucket_arn
              StorageClass: STANDARD
              EncryptionConfiguration:
                 ReplicaKmsKeyID: !Sub 'arn:aws:kms:${pDrRegion}:${AWS::AccountId}:alias/aws/s3'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref pKmsKeyId
              SSEAlgorithm: aws:kms
  
  # S3 Bucket Policy
  rS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref rBackupS3Bucket
      PolicyDocument:
        Statement:
          - Sid: AWSParamBucketPermissionCheck
            Effect: Allow
            Principal:
              AWS: !GetAtt rLambdaRole.Arn
            Action: s3:GetBucketAcl
            Resource: !GetAtt rBackupS3Bucket.Arn
          - Sid: AWSParamBucketDelivery
            Effect: Allow
            Principal:
              AWS: !GetAtt rLambdaRole.Arn
            Action: 
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${rBackupS3Bucket}/*"
  
  # IAM Role For SSM Lambda Functions
  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Effect: Allow
      Path: !Ref pIamRolePath
      RoleName: SSMParameterBackupRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ParameterStoreBackupPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:DescribeParameters
                Resource: !Sub "arn:aws:ssm:*:${AWS::AccountId}:*"
        - PolicyName: PutParamToS3Bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:GetBucketAcl
                Resource: !GetAtt rBackupS3Bucket.Arn
        - PolicyName: ParameterStoreRestorePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ssm:PutParameter
                Resource: !Sub "arn:aws:ssm:*:${AWS::AccountId}:*"
        - PolicyName: GetParamFromS3Bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetBucketAcl
                  - s3:GetObject
                  - s3:List*
                  - s3:Read*
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                Resource: [!GetAtt rBackupS3Bucket.Arn, !GetAtt rCreateDrBucket.bucket_arn]
        - PolicyName: CleanUpPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - servicecatalog:TerminateProvisionedProduct
                  - servicecatalog:DescribeProvisionedProduct
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - iam:DetachRolePolicy
                  - iam:DeleteRole
                  - iam:DeletePolicy
                  - iam:DeleteRolePolicy
                  - lambda:DeleteFunction
                  - lambda:RemovePermission
                  - events:DeleteRule
                  - events:RemoveTargets
                  - sns:Publish
                  - sns:Unsubscribe
                  - sns:DeleteTopic
                  - sns:GetTopicAttributes
                Resource: "*"

  # Lambda Function to Backup SSM
  rStoreParametersFunction:
    Type: AWS::Serverless::Function
    Description: The lambda function that gets all Systems Manager Parameters from Parameter store and backs up to S3
    Name: !Sub "BackupParameterStoreFunction-${AWS::AccountId}-${AWS::Region}"
    Properties:
      Environment:
        Variables:
          S3BucketARN: !GetAtt rBackupS3Bucket.Arn
          S3BucketName: !Ref rBackupS3Bucket
          Region: !Sub "${AWS::Region}"
      CodeUri: ./src
      Handler: handler.lambda_handler
      Runtime: python3.8
      Timeout: 900
      Role: !GetAtt rLambdaRole.Arn
  
  # Custom Resource to Invoke the Backup Lambda Function 
  rBackupParameters:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt rStoreParametersFunction.Arn

  # CloudWatch Rule to Schedule the Backup Lambda Invocation 
  rCloudWatchRule:
    Type: AWS::Events::Rule
    Properties:
      Description: A scheduled rule that triggers the store lambda function to backup ssm parameters
      Name: BackupSSMParameterStoreRule
      ScheduleExpression: !Ref pBackupSchedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt rStoreParametersFunction.Arn
          Id: !Ref rStoreParametersFunction
  
  # Permissions for Rule to Invoke Lambda Functions
  rPermissionsToInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rStoreParametersFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rCloudWatchRule.Arn

  # SNS Topic to Ping when an Update Occurs
  rSSMUpdateSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "SSMUpdateTopic"

  rSSMUpdateSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref pSNSUpdateEmail
      Protocol: email
      TopicArn: !Ref rSSMUpdateSNSTopic
  
  # Create DR Bucket
  rCreateDrBucketFunction:
    Type: AWS::Serverless::Function
    Description: The lambda creates a s3 bucket in another region.
    Name: !Sub "CreateDrBucketFunction-${AWS::AccountId}-${AWS::Region}"
    Properties:
      Environment:
        Variables:
          DrRegion: !Ref pDrRegion
          S3BucketName: !Ref pS3BucketName
          #OriginalLambdaRoleName: !Ref rLambdaRole
          OriginalLambdaRoleName: SSMParameterBackupRole
          OriginalPolicyName: GetParamFromS3Bucket
      CodeUri: ./src
      Handler: createBucket.lambda_handler
      Runtime: python3.8
      Timeout: 900
      Role: !GetAtt rCreateBucketRole.Arn
  
  # Custom Resource to Invoke the Create DR Bucket Lambda Function
  rCreateDrBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt rCreateDrBucketFunction.Arn
      AccountID: !Sub '${AWS::AccountId}'

  # S3 Bucket Replication Role
  rBucketReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DrReplicationRole
      Path: !Ref pIamRolePath
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
      Policies:
        - PolicyName: S3ReplicationPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${pS3BucketName}'
              - Effect: Allow
                Action:
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${pS3BucketName}/*'
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                Resource: !Sub '${rCreateDrBucket.bucket_arn}/*'
 
  # IAM Role For DR Bucket Lambda Function
  rCreateBucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Effect: Allow
      Path: !Ref pIamRolePath
      RoleName: DrCreateBucketRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: CreateBucketPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:DeleteBucket
                  - s3:CreateBucket
                  - s3:PutBucketVersioning
                  - s3:GetBucketVersioning
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                Resource: "arn:aws:s3:::*"

Outputs:
  oBackupFunctionArn:
    Value: !GetAtt rStoreParametersFunction.Arn
  
  oSSMLambdaRoleArn:
    Value: !GetAtt rLambdaRole.Arn
    Export:
      Name: SSMBackupRestoreLambdaArn

  oSSMMainBucketName:
    Value: !Ref rBackupS3Bucket
    Export:
      Name: SSMMainBucketName

  oSSMDRBucketArn:
    Value: !GetAtt rCreateDrBucket.bucket_arn
    Export:
      Name: SSMDRBucketArn
  
  oSNSTopicArn:
    Value: !Ref  rSSMUpdateSNSTopic
    Export:
      Name: SSMBackupRestoreSNSTopicArn
  
  oCreateDRBucketFunctionArn:
    Value: !GetAtt rCreateDrBucketFunction.Arn
  
  oDRBucket:
    Value: !GetAtt rCreateDrBucket.bucket_arn
  
  oBackUpBucket:
    Value: !GetAtt rBackupS3Bucket.Arn
  
  oCloudWatchRule:
    Value: !Ref rCloudWatchRule